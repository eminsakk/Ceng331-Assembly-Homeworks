#/* $begin absrev-ys */
##################################################################
# absrev.ys - Reverse a src block of len words to dst.
# Return the sum of absolute values of words contained in src.
#
# Include your name and ID here.
# Emin SAK 2380830
# Describe how and why you modified the baseline code.
#   ------------------------------------------------1---------------------------------------------------------------------------
#   >Instead of adding rdx to rcx 8 times and subtract 8 from rcx, we can do followings.
#   >Firstly we want to reach 8*rdx - 8 + rsi and this is equal to 8(rdx - 1) + rsi. Here we can use our savior leaq instruction.
#   >If we add rdx - 1 to rcx register and add rcx to itself 3 times we get 8(rdx - 1), and then we will add rsi.
#   >By doing these, we are reducing instructions and bubble's are not intervene our code.
# 
#   ------------------------------------------------2 THREADING---------------------------------------------------------------------------
#   >    Secondly there are unused registers, if we use them (like threading) for each time we can read multiple long's from array. 
#   >Doing these we can multiple reads and adds without jumping. Without jumps, we fall through to next instruction and there are no   
# misprediction. 
#   
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
absrev:
##################################################################
# You can modify this portion
    # Loop header
    xorq %rax,%rax 
    xorq %rcx, %rcx   	# sum = 0;
    leaq -1(%rdx),%rcx  # add (rdx - 1) to rcx   
     
    # ------------- 1 Starts ---------------------------------
    addq %rcx, %rcx #end of this, rcx include (2rdx - 2).  
    addq %rcx, %rcx #end of this, rcx include (4rdx - 4).
    addq %rcx, %rcx #end of this, rcx include (8rdx - 8).
    addq %rsi, %rcx #end of this, rcx include (8rdx - 8) + rsi.   
    # ------------- 1 Ends   ---------------------------------
    rrmovq %rcx, %rsi

        
#    > In my first implementation here I used jump instructions for Thread8, Thread4, Thread2, Thread1. Instead of this I allow code to fall through here and check size in ThreadX's. By doing these, I gain a lot of performance because of decreasing misprediction numbers in the code. 
#-------------------------------------------2 (THREADING) STARTS------------------------------------------------
Thread8:
    #Used registers %r8, %r9, %r10, %r11, %r12, %r13, %r14, %rcx, %rbx
    #Curr array addres in %rdi
    #Curr dest address in %rsi
    
    #Here first I check the size, If it is less than 8 we directly jump Thread4, If not we processed 8 elements.This situation decreased number of jmp instructions and mispredictions in my code as so nop instructions.  By doing this trick in all of the other threads, code's performance increase too much.
    icmpq 8 , %rdx
    jl Thread4
   
    #Copy values to registers, %r8, %r9, %r10, %r11, %r12, %r13, %r14, %rbp
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi), %r9
    mrmovq 16(%rdi), %r10      #   >In my first implmenetation I used leaq but it slows my code and it is 10 byte
    mrmovq 24(%rdi), %r11      #Due to the 1000 byte limitation and slowness, I use this tecnique to get and set array elements.
    mrmovq 32(%rdi), %rbp
    mrmovq 40(%rdi), %r12
    mrmovq 48(%rdi), %r13
    mrmovq 56(%rdi), %r14
   
 
    rmmovq %r8 , (%rsi)
    rmmovq %r9 , -8(%rsi)
    rmmovq %r10 , -16(%rsi)
    rmmovq %r11 , -24(%rsi)
    rmmovq %rbp , -32(%rsi)
    rmmovq %r12 , -40(%rsi)
    rmmovq %r13 , -48(%rsi)
    rmmovq %r14 , -56(%rsi)
    

    
    #Following codes are computing abs values of numbers. This trick is taken from ../y86-code/abs-asum-cmov.ys file :DDD
    xorq %rbx, %rbx #set 0
    subq %r8, %rbx
    cmovg %rbx, %r8
    
    xorq %rbx, %rbx #set 0
    subq %r9, %rbx
    cmovg %rbx, %r9
  
    xorq %rbx, %rbx #set 0
    subq %r10, %rbx
    cmovg %rbx, %r10

    xorq %rbx, %rbx #set 0
    subq %r11, %rbx
    cmovg %rbx, %r11
 
    xorq %rbx, %rbx #set 0
    subq %rbp, %rbx
    cmovg %rbx, %rbp 

    xorq %rbx, %rbx #set 0
    subq %r12, %rbx
    cmovg %rbx, %r12

    xorq %rbx, %rbx #set 0
    subq %r13, %rbx
    cmovg %rbx, %r13

    xorq %rbx, %rbx #set 0
    subq %r14, %rbx
    cmovg %rbx, %r14
    

    #Add abs values to our return value, namely %rax 
    addq %r8, %rax
    addq %r9, %rax
    addq %r10, %rax
    addq %r11, %rax
    addq %rbp, %rax
    addq %r12,%rax
    addq %r13, %rax
    addq %r14, %rax

    #Here we processed 8 elements and each elements are 8 bits long. So we have to update our src variable by adding 64 and 
#dst variable by substracting 64
    leaq 64(%rdi), %rdi
    leaq -64(%rsi),%rsi   

    #We processed 8 elements so our size must be decreased by 8.
    leaq -8(%rdx),%rdx
   
    #After processing 8 elements we jump Thread8 again, This is decreases number of jmp instructions in my code and prevents too much misspredictions.
    jmp Thread8
     


# FROM BELOW I DID NOT EXPLAIN WHAT I DONE BECAUSE IT IS JUST LIKE Thread8 EXCEPT SIZES
Thread4:
    icmpq 4 , %rdx
    jl Thread2
    
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi), %r9
    mrmovq 16(%rdi), %r10
    mrmovq 24(%rdi), %r11

    rmmovq %r8 , (%rsi)
    rmmovq %r9 , -8(%rsi)
    rmmovq %r10 , -16(%rsi)
    rmmovq %r11 , -24(%rsi)

    xorq %rbx, %rbx #set 0
    subq %r8, %rbx
    cmovg %rbx, %r8

    xorq %r13, %r13 #set 0
    subq %r9, %r13
    cmovg %r13, %r9

    xorq %r14, %r14 #set 0
    subq %r10, %r14
    cmovg %r14, %r10

    xorq %rbx, %rbx #set 0
    subq %r11, %rbx
    cmovg %rbx, %r11

    
    addq %r8, %rax
    addq %r9, %rax
    addq %r10, %rax
    addq %r11, %rax
 
    leaq 32(%rdi),%rdi
    leaq -32(%rsi), %rsi
    leaq -4(%rdx),%rdx        
    
Thread2:
    icmpq 2 , %rdx
    jl Thread1
    
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi), %r9

 
    rmmovq %r8 ,(%rsi)
    rmmovq %r9 , -8(%rsi)

    xorq %rbx, %rbx #set 0
    subq %r8, %rbx
    cmovg %rbx, %r8

    xorq %rbx, %rbx #set 0
    subq %r9, %rbx
    cmovg %rbx, %r9

    addq %r8, %rax
    addq %r9, %rax 

    leaq 16(%rdi), %rdi
    leaq -16(%rsi), %rsi
    leaq -2(%rdx),%rdx


Thread1:
    icmpq 1 , %rdx
    jl Done
    
    mrmovq (%rdi), %r8
    rmmovq %r8 , (%rsi)

    xorq %rbx, %rbx #set 0
    subq %r8, %rbx
    cmovg %rbx, %r8

    addq %r8 ,%rax

#Here we are not compute new values of rsi rdi and rdx, Because this thread run only once.If code manages to be this line all arrays abs values are added to rax, and original array elements inserted the destination address in reverse.
#By not computing new values of rsi, rdi and rdx we gained 3 cycles which is COOL :DDD.
#-------------------------------------------2 (THREADING) ENDS------------------------------------------------

#    >If you notice that I did not use ret instruction because it is unnecassary. In the code I do not break the program flow using ret instrution. By doing this, the number of misprediction and nop operations are reduced. 
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end absrev-ys */

